{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["SET","REMOVE","actions","todo","type","payload","currentTodoReducer","state","action","FILTER","CLEAR","actionsFilter","status","query","initialStore","filterReducer","store","TODOS","actionsTodos","value","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","handleCurrentTodo","length","className","map","id","completed","cn","title","onClick","selectedTodo","filteredTodo","TodoFilter","handleFilter","filters","handleClearQuery","onSubmit","event","preventDefault","onChange","e","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","removeCurrentTodo","useState","isLoading","setIsLoading","user","setUser","useEffect","loadUser","a","userId","data","href","email","name","useAppSelector","useDispatch","useSelector","App","dispatch","fetchData","todoData","filteredTodos","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53c9a14a.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nconst SET = 'currentTodo/SET';\nconst REMOVE = 'currentTodo/REMOVE';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: typeof REMOVE };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: typeof SET;\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: REMOVE });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: SET,\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case SET:\n      return action.payload;\n    case REMOVE:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nconst FILTER = 'filter';\nconst CLEAR = 'clear';\n\ntype FilterAction = {\n  type: typeof FILTER;\n  status: Status;\n  query: string;\n};\n\ntype ClearAction = {\n  type: typeof CLEAR;\n  status: Status;\n};\n\ntype Filter = {\n  status: Status;\n  query: string;\n};\n\nexport const actionsFilter = {\n  filter: (status: Status, query: string): FilterAction => ({\n    type: FILTER,\n    status,\n    query,\n  }),\n  clear: (status: Status): ClearAction => ({\n    type: CLEAR,\n    status,\n  }),\n\n};\n\ntype Actions = FilterAction | ClearAction;\n\nconst initialStore: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (store = initialStore, action: Actions): Filter => {\n  switch (action.type) {\n    case FILTER:\n      return {\n        query: action.query,\n        status: action.status,\n      };\n    case CLEAR:\n      return {\n        query: '',\n        status: action.status,\n      };\n\n    default:\n      return store;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nconst TODOS = 'todos';\n\ntype AddTodosAction = {\n  type: typeof TODOS,\n  value: Todo[]\n};\n\nexport const actionsTodos = {\n  addTodos: (value: Todo[]): AddTodosAction => ({\n    type: TODOS,\n    value,\n  }),\n};\n\nconst todosReducer = (todos: Todo[] = [], action: AddTodosAction): Todo[] => {\n  if (action.type === TODOS) {\n    return action.value;\n  }\n\n  return todos;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  handleCurrentTodo: (todo: Todo) => void;\n  currentTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, handleCurrentTodo, currentTodo }) => {\n  const todoCompletedClass = (value: boolean) => cn(\n    { 'has-text-danger': value === false },\n    { 'has-text-success': value === true },\n  );\n\n  const eyeClass = (selectedTodo: Todo | null, filteredTodo: Todo) => cn(\n    'far',\n    { 'fa-eye': selectedTodo === null },\n    { 'fa-eye-slash': selectedTodo && selectedTodo.id === filteredTodo.id },\n  );\n\n  return (\n    <>\n      {todos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={todoCompletedClass(todo.completed)}>{todo.title}</p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleCurrentTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={eyeClass(currentTodo, todo)} />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  handleFilter: (status: Status, query: string) => void;\n  filters: { status: Status, query: string }\n  handleClearQuery: (status: Status) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  handleFilter, filters, handleClearQuery,\n}) => {\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => handleFilter(\n              e.target.value as Status, filters.query,\n            )}\n            value={filters.status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filters.query}\n          onChange={(e) => handleFilter(\n            filters.status as Status, e.target.value,\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filters.query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleClearQuery(filters.status as Status)}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  currentTodo: Todo;\n  removeCurrentTodo: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  currentTodo, removeCurrentTodo,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getUser(currentTodo.userId);\n\n        setUser(data);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={user ? user.email : ''}>{user && user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actionsTodos } from './features/todos';\nimport { actionsFilter } from './features/filter';\nimport { useAppSelector } from './app/hooks';\nimport { Status } from './types/Status';\nimport { Todo } from './types/Todo';\nimport { actions } from './features/currentTodo';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const todos = useAppSelector(state => state.todos);\n  const filters = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  const handleFilter = (status: Status, query: string) => {\n    dispatch(actionsFilter.filter(status, query));\n  };\n\n  const handleClearQuery = (status: Status) => {\n    dispatch(actionsFilter.clear(status));\n  };\n\n  const handleCurrentTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  const removeCurrentTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const todoData = await getTodos();\n\n        dispatch(actionsTodos.addTodos(todoData));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const filteredTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(filters.query.toLowerCase()))\n    .filter(todo => {\n      switch (filters.status) {\n        case 'all':\n          return todo;\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                handleFilter={handleFilter}\n                filters={filters}\n                handleClearQuery={handleClearQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList todos={filteredTodos} handleCurrentTodo={handleCurrentTodo} currentTodo={currentTodo} />}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo !== null && (\n        <TodoModal currentTodo={currentTodo} removeCurrentTodo={removeCurrentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}